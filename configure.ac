dnl#                                               -*- Autoconf -*-
# configure.ac for dlcompat
# Process with autoconf to generate a configure script
#
# This originally only did minimal checks, but that was all that was
# needed. Now it does more checks.

AC_PREREQ([2.69])
AC_INIT([dlcompat],[20030629],[ogorman@users.sourceforge.net])
AC_CONFIG_SRCDIR([dlfcn.c])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_LIBOBJ_DIR([.])
VERSION=20030629
AC_SUBST([VERSION])
OPT=-O2

# Automake
AC_CONFIG_MACRO_DIR([m4])
AM_INIT_AUTOMAKE([foreign])
AM_MAINTAINER_MODE

# Checks for programs.
AM_PROG_AS
AM_PROG_AR
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_INSTALL
AM_PROG_INSTALL_STRIP
AC_PROG_LN_S
AC_PROG_RANLIB
AC_PROG_SED

# Checks for libraries.
AC_CHECK_LIB([c],[printf])
dnl# If you already have dlopen in your libdl, dlcompat will probably be
dnl# unnecessary for you, but whatever...
AC_CHECK_LIB([dl],[dlopen])

# Checks for header files.
AC_HEADER_STAT
AC_HEADER_STDBOOL dnl# also "_CHECK"s it
AC_CHECK_HEADERS([fcntl.h libintl.h limits.h mach/mach.h \
                  mach-o/nlist.h mach-o/getsect.h \
                  pthread.h stdarg.h stddef.h stdio.h \
                  sys/mount.h sys/param.h sys/time.h \
                  wchar.h])
AC_CHECK_HEADER([mach-o/dyld.h],[],
                [AC_MSG_ERROR([No dyld.h found, cannot continue.])])
case ${host} in
  *p*pc*-apple-darwin*)
    AC_CHECK_HEADERS([architecture/ppc/mode_independent_asm.h])
    ;;
esac

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_C_PROTOTYPES
AC_C_RESTRICT
AC_C_VOLATILE
AC_SYS_LARGEFILE
AC_TYPE_SIZE_T
AC_TYPE_UINTPTR_T
AC_CHECK_TYPES([dlfunc_t])

# Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_ERROR_AT_LINE
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_STRERROR_R
AC_CHECK_FUNCS([atexit fflush fprintf getenv memcpy memset \
                snprintf strchr strcmp strerror strlen strncpy strrchr])
AC_CHECK_FUNC([NSLinkModule],[],
              [AC_MSG_ERROR([NSLinkModule not found, cannot continue.])])
AC_CHECK_FUNC([NSAddImage],[],
              [AC_MSG_WARN([Not tested without NSAddImage, good luck!])])
AC_REPLACE_FUNCS([_dyld_func_lookup lookupDyldFunction])
AC_LIBOBJ([progname])
# The "MY_" is there because otherwise DYLD warns about it being an
# unknown environment variable:
export MY_DYLD_LIBOBJS="`echo \"${LIBOBJS}\" | tr \  \\\n | grep -i dyld | tr \\\n \ `"
echo "MY_DYLD_LIBOBJS are ${MY_DYLD_LIBOBJS}"
dnl# use this to just use the libobjs that we manually specified while
dnl# avoiding including the ones that autoconf automatically added:
AC_SUBST([MY_DYLD_LIBOBJS])

# debug option
AC_ARG_ENABLE([debug],
              [AS_HELP_STRING([--enable-debug],[build a debug version])],[
		OPT="-O0 -g"
		DEBUGDEF="-DDEBUG=2"
		],[])

# for the fink package manager, build a version that is binary compatible
# with all previous releases of dlcompat
# no automatic underscore prepending
# lib is named libdl.0.dylib
AC_ARG_ENABLE([fink],
              [AS_HELP_STRING([--enable-fink],[build a fink version])],[
		FINKDEF="-DFINK_BUILD=1"
		VERSTRING=""
		LIBVER=0
		NOTPREPEND="not"
		],[
		FINKDEF=""
		VERSTRING="-compatibility_version 1 -current_version 1"
		LIBVER=1
		NOTPREPEND="indeed"
		])

AC_SUBST([OPT])
AC_SUBST([DEBUGDEF])
AC_SUBST([FINKDEF])
AC_SUBST([VERSTRING])
AC_SUBST([LIBVER])
AC_SUBST([NOTPREPEND])
AC_CONFIG_FILES([Makefile
		 Makefile.orig])
dnl# do NOT put dlopen.3 here; it needs to be be generated by the Makefile,
dnl# and NOT by the configure script
AC_OUTPUT
